services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-pv_management}
      POSTGRES_USER: ${DB_USERNAME:-pv_app}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pv_app}
    volumes:
      - /mnt/db/postgres:/var/lib/postgresql/data
    healthcheck:
      # Use $$ to escape $ in compose files
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1" ]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 20s
    networks:
      - appnet

  backend:
    image: europe-west1-docker.pkg.dev/pv-management-app/pv-management-app-repo/backend:latest
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      JAVA_TOOL_OPTIONS: "-Dspring.profiles.active=prod"

      # Bind & port
      SERVER_ADDRESS: "0.0.0.0"
      SERVER_PORT: "8080"

      # Direct Spring datasource wiring (no custom mapping needed)
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${DB_NAME:-pv_management}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-pv_app}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-pv_app}

      SEMS_ACCOUNT: ${SEMS_ACCOUNT}
      SEMS_PASSWORD: ${SEMS_PASSWORD}
      SEMS_STATION_ID: ${SEMS_STATION_ID}
      JWT_SECRET: ${JWT_SECRET:-dev-secret}
      APP_ADMIN_EMAIL: ${APP_ADMIN_EMAIL:-admin@example.com}
      APP_ADMIN_PASSWORD: ${APP_ADMIN_PASSWORD:-super-secret-password}
    expose:
      - "8080"
    networks:
      - appnet

  frontend:
    image: europe-west1-docker.pkg.dev/pv-management-app/pv-management-app-repo/frontend:latest
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - appnet

networks:
  appnet:
    driver: bridge